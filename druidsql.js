/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { Start: peg$parseStart },
      peg$startRuleFunction  = peg$parseStart,

      peg$c0 = function(spacing, expression, endspacing) {
        return {type: 'expressionOnly',
        			spacing: spacing,
        			expression: expression,
        			endSpacing: endspacing }},
      peg$c1 = "select",
      peg$c2 = peg$literalExpectation("SELECT", true),
      peg$c3 = function(spacing, syntax, selectParts, from, where, groupby, having, orderBy, limit, unionAll, endSpacing) {
          return {
            type: 'query',
            queryType: "SELECT",
            selectParts: selectParts,
            from: from,
            where: where,
            groupby: groupby,
            having: having,
            orderBy: orderBy,
            limit: limit,
            unionAll: unionAll,
            syntax: syntax,
            spacing: spacing,
            endSpacing: endSpacing
          }
        },
      peg$c4 = function(SelectPart) {
          return SelectPart
        },
      peg$c5 = function(spacing, distinct, selectPart, alias) {
          return {
            type: "selectPart",
            distinct: distinct,
            expr: selectPart,
            alias: alias,
            spacing: spacing
          }
        },
      peg$c6 = "from",
      peg$c7 = peg$literalExpectation("FROM", true),
      peg$c8 = function(spacing, syntax, value) {
          return {
            type: 'from',
            value: value,
            spacing: spacing,
            syntax: syntax
          }
        },
      peg$c9 = "where",
      peg$c10 = peg$literalExpectation("WHERE", true),
      peg$c11 = function(spacing, syntax, expr) {
          return {
            type: "where",
            expr: expr,
            spacing: spacing,
            syntax: syntax
          }
        },
      peg$c12 = "group by",
      peg$c13 = peg$literalExpectation("GROUP BY", true),
      peg$c14 = function(spacing, syntax, groupByParts) {
          return {
            type: 'groupBy',
            groupByParts: groupByParts,
            spacing: spacing,
            syntax: syntax
          }
        },
      peg$c15 = function(groupByPart) {
          return groupByPart
         },
      peg$c16 = "having",
      peg$c17 = peg$literalExpectation("HAVING", true),
      peg$c18 = function(spacing, syntax, expr) {
          return {
            type: "having",
            expr: expr,
            spacing: spacing,
            syntax: syntax
          }
        },
      peg$c19 = "order by",
      peg$c20 = peg$literalExpectation("ORDER BY", true),
      peg$c21 = function(spacing, syntax, orderByParts) {
          return {
            type: 'orderBy',
            orderByParts: orderByParts,
            spacing: spacing,
            syntax: syntax
          }
        },
      peg$c22 = "limit",
      peg$c23 = peg$literalExpectation("LIMIT", true),
      peg$c24 = function(spacing, expr, direction) {
          return {
            type: "orderByPart",
            expr: expr,
            direction: direction,
            spacing: spacing
          }
        },
      peg$c25 = "desc",
      peg$c26 = peg$literalExpectation("DESC", true),
      peg$c27 = "asc",
      peg$c28 = peg$literalExpectation("ASC", true),
      peg$c29 = function(spacing, direction) {
          return {
            type: 'direction',
            direction: direction,
            spacing: spacing
          }
        },
      peg$c30 = function(spacing, value) {
          return {
            type: 'exprPart',
            value: value,
            spacing: spacing
          }
        },
      peg$c31 = function(spacing, syntax, value) {
          return {
            type: 'limit',
            value: value,
            spacing: spacing,
            syntax: syntax
          }
        },
      peg$c32 = "union all",
      peg$c33 = peg$literalExpectation("UNION ALL", true),
      peg$c34 = function(spacing, syntax, newQuery) {
          return {
            type: 'unionAll',
            expr: newQuery,
            spacing: spacing,
            syntax:syntax
          }
        },
      peg$c35 = "case",
      peg$c36 = peg$literalExpectation("CASE", true),
      peg$c37 = function(spacing, syntax, caseValue, whenClause, elseValue, end) {
          return {
            type: "case",
            caseValue: caseValue,
            when: whenClause,
            elseValue: elseValue,
            end: end,
            spacing: spacing,
            syntax: syntax

          }
        },
      peg$c38 = "when",
      peg$c39 = peg$literalExpectation("WHEN", true),
      peg$c40 = function(spacing, caseValue) {
          return {
            type: 'caseValue',
            caseValue: caseValue,
            spacing: spacing
            }
        },
      peg$c41 = "else",
      peg$c42 = peg$literalExpectation("ELSE", true),
      peg$c43 = function(spacing, syntax, elseValue) {
          return {
            type: 'elseValue',
            elseValue: elseValue,
            spacing: spacing,
            syntax: syntax
          }
        },
      peg$c44 = "end",
      peg$c45 = peg$literalExpectation("END", true),
      peg$c46 = function(spacing, syntax) {
      	 return {
            type:'end',
            spacing: spacing,
            syntax: syntax
          }
        },
      peg$c47 = function(spacing, syntax, when, then) {
          return {
            type:'when',
            when: when,
            then: then,
            syntax: syntax,
            spacing: spacing
          }
        },
      peg$c48 = "then",
      peg$c49 = peg$literalExpectation("THEN", true),
      peg$c50 = function(spacing, syntax, then) {
      	  return {
            type: 'then',
            syntax: syntax,
            then: then,
            spacing: spacing
          }
        },
      peg$c51 = function(spacing, lhs, operator, rhs) {
          return {
            type: "binaryExpression",
            operator: operator,
            lhs: lhs,
            rhs: rhs,
            spacing: spacing
          }
        },
      peg$c52 = function(spacing, lhs, operator, rhs) {
          return {
            type: "expression",
            operator: operator,
            lhs: lhs,
            rhs: rhs,
            spacing: spacing
          }
        },
      peg$c53 = function(spacing, functionCall, argument) {
          return {
            type: "function",
            functionCall: functionCall,
            arguments: argument,
            spacing: spacing
          }
        },
      peg$c54 = "distinct",
      peg$c55 = peg$literalExpectation("DISTINCT", true),
      peg$c56 = function(spacing, distinct) {
          return {
            type: 'distinct',
            distinct: distinct,
            spacing: spacing
          }
        },
      peg$c57 = function(distinct, argumentValue) {
          return {
            type: 'argument',
            distinct: distinct,
            argumentValue: argumentValue
          }
        },
      peg$c58 = /^[^(), ]/,
      peg$c59 = peg$classExpectation(["(", ")", ",", " "], true, false),
      peg$c60 = function(spacing, argument) {
             return {
               type:'argumentValue',
               spacing: spacing,
               argument: Array.isArray(argument) ? argument.join("") : argument
             }
           },
      peg$c61 = /^[^"'()]/,
      peg$c62 = peg$classExpectation(["\"", "'", "(", ")"], true, false),
      peg$c63 = function(spacing, quote, value) {
          return {
            type: "variable",
            value: value.join(""),
            spacing: spacing,
            quote: quote
          }
        },
      peg$c64 = /^[a-zA-Z_.]/,
      peg$c65 = peg$classExpectation([["a", "z"], ["A", "Z"], "_", "."], false, false),
      peg$c66 = function(spacing, value) {
          return {
            type: "Constant",
            value: value.join(""),
            spacing: spacing
          }
        },
      peg$c67 = /^[0-9]/,
      peg$c68 = peg$classExpectation([["0", "9"]], false, false),
      peg$c69 = function(spacing, value) {
          return {
            type: "Integer",
            value: value.join(""),
            spacing: spacing
          }
        },
      peg$c70 = "timestamp",
      peg$c71 = peg$literalExpectation("TIMESTAMP", true),
      peg$c72 = /^[0-9" ":\-]/,
      peg$c73 = peg$classExpectation([["0", "9"], "\"", " ", "\"", ":", "-"], false, false),
      peg$c74 = function(spacing, timeStamp) {
          return {
            type: "timestamp",
            value: timeStamp.join(""),
            spacing: spacing
          }
        },
      peg$c75 = "+",
      peg$c76 = peg$literalExpectation("+", false),
      peg$c77 = "-",
      peg$c78 = peg$literalExpectation("-", false),
      peg$c79 = "/",
      peg$c80 = peg$literalExpectation("/", false),
      peg$c81 = "*",
      peg$c82 = peg$literalExpectation("*", false),
      peg$c83 = "=",
      peg$c84 = peg$literalExpectation("=", false),
      peg$c85 = function(spacing, operator) {
           return {
             type: 'operator',
             spacing: spacing,
             operator: operator
           }
         },
      peg$c86 = "interval",
      peg$c87 = peg$literalExpectation("INTERVAL", true),
      peg$c88 = function(spacing, value, constant) {
          return {
              type: "interval",
              value: value,
              constant: constant,
              spacing: spacing
          }
        },
      peg$c89 = "as",
      peg$c90 = peg$literalExpectation("AS", true),
      peg$c91 = function(spacing, syntax, value) {
          return {type:'alias',
          value: value,
          spacing: spacing,
          syntax: syntax
          }
      	},
      peg$c92 = function(Function) {
         	if (functions.includes(Function)) {
          	return Function
          }
        },
      peg$c93 = ">=",
      peg$c94 = peg$literalExpectation(">=", false),
      peg$c95 = ">",
      peg$c96 = peg$literalExpectation(">", false),
      peg$c97 = "=<",
      peg$c98 = peg$literalExpectation("=<", false),
      peg$c99 = "!=",
      peg$c100 = peg$literalExpectation("!=", false),
      peg$c101 = "<",
      peg$c102 = peg$literalExpectation("<", false),
      peg$c103 = "<>",
      peg$c104 = peg$literalExpectation("<>", false),
      peg$c105 = "between",
      peg$c106 = peg$literalExpectation("BETWEEN", true),
      peg$c107 = "not between",
      peg$c108 = peg$literalExpectation("NOT BETWEEN", true),
      peg$c109 = "not like",
      peg$c110 = peg$literalExpectation("NOT LIKE", true),
      peg$c111 = "like",
      peg$c112 = peg$literalExpectation("LIKE", true),
      peg$c113 = "is null",
      peg$c114 = peg$literalExpectation("IS NULL", true),
      peg$c115 = "is not null",
      peg$c116 = peg$literalExpectation("IS NOT NULL", true),
      peg$c117 = "is true",
      peg$c118 = peg$literalExpectation("IS TRUE", true),
      peg$c119 = "is not true",
      peg$c120 = peg$literalExpectation("IS NOT TRUE", true),
      peg$c121 = "is false",
      peg$c122 = peg$literalExpectation("IS FALSE", true),
      peg$c123 = "in",
      peg$c124 = peg$literalExpectation("IN", true),
      peg$c125 = "not in",
      peg$c126 = peg$literalExpectation("NOT IN", true),
      peg$c127 = "or",
      peg$c128 = peg$literalExpectation("OR", true),
      peg$c129 = "and",
      peg$c130 = peg$literalExpectation("AND", true),
      peg$c131 = "not",
      peg$c132 = peg$literalExpectation("NOT", true),
      peg$c133 = function(spacing, operator) {
          return {
            type: 'operator',
            operator: operator,
            spacing: spacing
          }
        },
      peg$c134 = /^[ \t\n\r(),;]/,
      peg$c135 = peg$classExpectation([" ", "\t", "\n", "\r", "(", ")", ",", ";"], false, false),
      peg$c136 = function(spacing, schema, table, alias) {
          return {
            type: 'table',
            schema: schema ? schema.join("").replace(/[,.]/g, ""): null,
            alias: alias,
            table: table,
            spacing: spacing
          }
        },
      peg$c137 = function() {
      		return {
            type: "star",
          }
        },
      peg$c138 = "(",
      peg$c139 = peg$literalExpectation("(", false),
      peg$c140 = ")",
      peg$c141 = peg$literalExpectation(")", false),
      peg$c142 = "\"",
      peg$c143 = peg$literalExpectation("\"", false),
      peg$c144 = ",",
      peg$c145 = peg$literalExpectation(",", false),
      peg$c146 = ";",
      peg$c147 = peg$literalExpectation(";", false),
      peg$c148 = "'",
      peg$c149 = peg$literalExpectation("'", false),
      peg$c150 = ".",
      peg$c151 = peg$literalExpectation(".", false),
      peg$c152 = /^[a-z_]/i,
      peg$c153 = peg$classExpectation([["a", "z"], "_"], false, true),
      peg$c154 = function(part) {
          return part.join("")
        },

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseStart() {
    var s0, s1, s2, s3;

    s0 = peg$parseQuery();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseExpression();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c0(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseQuery() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c1) {
        s2 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c2); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSelectParts();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseFrom();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseWhere();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseGroupBy();
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseHaving();
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseOrderBy();
                  if (s8 === peg$FAILED) {
                    s8 = null;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseLimit();
                    if (s9 === peg$FAILED) {
                      s9 = null;
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parseUnionAll();
                      if (s10 === peg$FAILED) {
                        s10 = null;
                      }
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parse_();
                        if (s11 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c3(s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSelectParts() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseSelectPart();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseSelectPart();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c4(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSelectPart() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseDistinct();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseVariable();
        if (s3 === peg$FAILED) {
          s3 = peg$parseFunction();
          if (s3 === peg$FAILED) {
            s3 = peg$parseCase();
            if (s3 === peg$FAILED) {
              s3 = peg$parseConstant();
              if (s3 === peg$FAILED) {
                s3 = peg$parsestar();
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseAlias();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c5(s1, s2, s3, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFrom() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c6) {
        s2 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c7); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseQuery();
        if (s3 === peg$FAILED) {
          s3 = peg$parseTable();
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c8(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseWhere() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c9) {
        s2 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c10); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseExpression();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c11(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseGroupBy() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c12) {
        s2 = input.substr(peg$currPos, 8);
        peg$currPos += 8;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c13); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseGroupByPart();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseGroupByPart();
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c14(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseGroupByPart() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parseReserved();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = void 0;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseInteger();
      if (s2 === peg$FAILED) {
        s2 = peg$parseVariable();
        if (s2 === peg$FAILED) {
          s2 = peg$parseConstant();
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c15(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseHaving() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c16) {
        s2 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c17); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseExpression();
        if (s3 === peg$FAILED) {
          s3 = peg$parseBinaryExpression();
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c18(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOrderBy() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c19) {
        s2 = input.substr(peg$currPos, 8);
        peg$currPos += 8;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c20); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseOrderByPart();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseOrderByPart();
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c21(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOrderByPart() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c22) {
        s3 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c23); }
      }
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseExprPart();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseExprPart();
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseDirection();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c24(s1, s3, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDirection() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c25) {
        s2 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c26); }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c27) {
          s2 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c28); }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c29(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseExprPart() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseDirection();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseFunction();
        if (s3 === peg$FAILED) {
          s3 = peg$parseVariable();
          if (s3 === peg$FAILED) {
            s3 = peg$parseConstant();
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c30(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLimit() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c22) {
        s2 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c23); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseInteger();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c31(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseUnionAll() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c32) {
        s2 = input.substr(peg$currPos, 9);
        peg$currPos += 9;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c33); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseQuery();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c34(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCase() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c35) {
        s2 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c36); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCaseValue();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseWhenClause();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseWhenClause();
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseElseValue();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseEnd();
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c37(s1, s2, s3, s4, s5, s6);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCaseValue() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c38) {
        s3 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c39); }
      }
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseVariable();
        if (s3 === peg$FAILED) {
          s3 = peg$parseConstant();
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c40(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseElseValue() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c41) {
        s2 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c42); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseBinaryExpression();
        if (s3 === peg$FAILED) {
          s3 = peg$parseExpression();
          if (s3 === peg$FAILED) {
            s3 = peg$parseInteger();
            if (s3 === peg$FAILED) {
              s3 = peg$parseVariable();
              if (s3 === peg$FAILED) {
                s3 = peg$parseConstant();
              }
            }
          }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c43(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEnd() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c44) {
        s2 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c45); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c46(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseWhenClause() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c38) {
        s2 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c39); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseBinaryExpression();
        if (s3 === peg$FAILED) {
          s3 = peg$parseExpression();
          if (s3 === peg$FAILED) {
            s3 = peg$parseVariable();
            if (s3 === peg$FAILED) {
              s3 = peg$parseConstant();
              if (s3 === peg$FAILED) {
                s3 = peg$parseInteger();
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseThen();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c47(s1, s2, s3, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseThen() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c48) {
        s2 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c49); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseInteger();
        if (s3 === peg$FAILED) {
          s3 = peg$parseCase();
          if (s3 === peg$FAILED) {
            s3 = peg$parseBinaryExpression();
            if (s3 === peg$FAILED) {
              s3 = peg$parseExpression();
              if (s3 === peg$FAILED) {
                s3 = peg$parseVariable();
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c50(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBinaryExpression() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseExpression();
      if (s2 === peg$FAILED) {
        s2 = peg$parseFunction();
        if (s2 === peg$FAILED) {
          s2 = peg$parseTimeStamp();
          if (s2 === peg$FAILED) {
            s2 = peg$parseVariable();
            if (s2 === peg$FAILED) {
              s2 = peg$parseConstant();
              if (s2 === peg$FAILED) {
                s2 = peg$parseInteger();
              }
            }
          }
        }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseBinaryOperator();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseBinaryExpression();
          if (s4 === peg$FAILED) {
            s4 = peg$parseFunction();
            if (s4 === peg$FAILED) {
              s4 = peg$parseTimeStamp();
              if (s4 === peg$FAILED) {
                s4 = peg$parseExpression();
                if (s4 === peg$FAILED) {
                  s4 = peg$parseVariable();
                  if (s4 === peg$FAILED) {
                    s4 = peg$parseConstant();
                    if (s4 === peg$FAILED) {
                      s4 = peg$parseInteger();
                    }
                  }
                }
              }
            }
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c51(s1, s2, s3, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseExpression() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseFunction();
      if (s2 === peg$FAILED) {
        s2 = peg$parseTimeStamp();
        if (s2 === peg$FAILED) {
          s2 = peg$parseVariable();
          if (s2 === peg$FAILED) {
            s2 = peg$parseConstant();
            if (s2 === peg$FAILED) {
              s2 = peg$parseInteger();
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseOperator();
        if (s3 === peg$FAILED) {
          s3 = peg$parseBinaryOperator();
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseExpression();
          if (s4 === peg$FAILED) {
            s4 = peg$parseFunction();
            if (s4 === peg$FAILED) {
              s4 = peg$parseTimeStamp();
              if (s4 === peg$FAILED) {
                s4 = peg$parseInterval();
                if (s4 === peg$FAILED) {
                  s4 = peg$parseVariable();
                  if (s4 === peg$FAILED) {
                    s4 = peg$parseConstant();
                    if (s4 === peg$FAILED) {
                      s4 = peg$parseInteger();
                    }
                  }
                }
              }
            }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c52(s1, s2, s3, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFunction() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseFunctions();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseOpenParen();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseArgument();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseArgument();
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCloseParen();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c53(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDistinct() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c54) {
        s2 = input.substr(peg$currPos, 8);
        peg$currPos += 8;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c55); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c56(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseArgument() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseDistinct();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseArgumentValue();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c57(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseArgumentValue() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseReserved();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseConstant();
        if (s3 === peg$FAILED) {
          s3 = peg$parseVariable();
          if (s3 === peg$FAILED) {
            s3 = peg$parsestar();
            if (s3 === peg$FAILED) {
              s3 = [];
              if (peg$c58.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c59); }
              }
              if (s4 !== peg$FAILED) {
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  if (peg$c58.test(input.charAt(peg$currPos))) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c59); }
                  }
                }
              } else {
                s3 = peg$FAILED;
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c60(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseVariable() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseQuoteMark();
      if (s2 === peg$FAILED) {
        s2 = peg$parseApostrophe();
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$c61.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c62); }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$c61.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c62); }
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseQuoteMark();
          if (s4 === peg$FAILED) {
            s4 = peg$parseApostrophe();
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c63(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseConstant() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseReserved();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$c64.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c65); }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$c64.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c65); }
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c66(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseInteger() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c67.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c68); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c67.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c68); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c69(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTimeStamp() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c70) {
        s2 = input.substr(peg$currPos, 9);
        peg$currPos += 9;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c71); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseApostrophe();
          if (s4 !== peg$FAILED) {
            s5 = [];
            if (peg$c72.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c73); }
            }
            if (s6 !== peg$FAILED) {
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                if (peg$c72.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c73); }
                }
              }
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseApostrophe();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c74(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOperator() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 43) {
        s2 = peg$c75;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c76); }
      }
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s2 = peg$c77;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c78); }
        }
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 47) {
            s2 = peg$c79;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c80); }
          }
          if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 42) {
              s2 = peg$c81;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c82); }
            }
            if (s2 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 61) {
                s2 = peg$c83;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c84); }
              }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c85(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseInterval() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c86) {
        s2 = input.substr(peg$currPos, 8);
        peg$currPos += 8;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c87); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseApostrophe();
        if (s3 === peg$FAILED) {
          s3 = peg$parseInteger();
          if (s3 === peg$FAILED) {
            s3 = peg$parseApostrophe();
            if (s3 === peg$FAILED) {
              s3 = peg$parseVariable();
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseConstant();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c88(s1, s3, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAlias() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c89) {
        s2 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c90); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseVariable();
        if (s3 === peg$FAILED) {
          s3 = peg$parseConstant();
          if (s3 === peg$FAILED) {
            s3 = peg$parseInteger();
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c91(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFunctions() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseIdentifierPart();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c92(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseBinaryOperator() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseParts();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c93) {
          s3 = peg$c93;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c94); }
        }
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 62) {
            s3 = peg$c95;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c96); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c97) {
              s3 = peg$c97;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c98); }
            }
            if (s3 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 61) {
                s3 = peg$c83;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c84); }
              }
              if (s3 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c99) {
                  s3 = peg$c99;
                  peg$currPos += 2;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c100); }
                }
                if (s3 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 60) {
                    s3 = peg$c101;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c102); }
                  }
                  if (s3 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c103) {
                      s3 = peg$c103;
                      peg$currPos += 2;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c104); }
                    }
                    if (s3 === peg$FAILED) {
                      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c105) {
                        s3 = input.substr(peg$currPos, 7);
                        peg$currPos += 7;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c106); }
                      }
                      if (s3 === peg$FAILED) {
                        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c107) {
                          s3 = input.substr(peg$currPos, 11);
                          peg$currPos += 11;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c108); }
                        }
                        if (s3 === peg$FAILED) {
                          if (input.substr(peg$currPos, 8).toLowerCase() === peg$c109) {
                            s3 = input.substr(peg$currPos, 8);
                            peg$currPos += 8;
                          } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c110); }
                          }
                          if (s3 === peg$FAILED) {
                            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c111) {
                              s3 = input.substr(peg$currPos, 4);
                              peg$currPos += 4;
                            } else {
                              s3 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c112); }
                            }
                            if (s3 === peg$FAILED) {
                              if (input.substr(peg$currPos, 7).toLowerCase() === peg$c113) {
                                s3 = input.substr(peg$currPos, 7);
                                peg$currPos += 7;
                              } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c114); }
                              }
                              if (s3 === peg$FAILED) {
                                if (input.substr(peg$currPos, 11).toLowerCase() === peg$c115) {
                                  s3 = input.substr(peg$currPos, 11);
                                  peg$currPos += 11;
                                } else {
                                  s3 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c116); }
                                }
                                if (s3 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 7).toLowerCase() === peg$c117) {
                                    s3 = input.substr(peg$currPos, 7);
                                    peg$currPos += 7;
                                  } else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c118); }
                                  }
                                  if (s3 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c119) {
                                      s3 = input.substr(peg$currPos, 11);
                                      peg$currPos += 11;
                                    } else {
                                      s3 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c120); }
                                    }
                                    if (s3 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c121) {
                                        s3 = input.substr(peg$currPos, 8);
                                        peg$currPos += 8;
                                      } else {
                                        s3 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c122); }
                                      }
                                      if (s3 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c123) {
                                          s3 = input.substr(peg$currPos, 2);
                                          peg$currPos += 2;
                                        } else {
                                          s3 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c124); }
                                        }
                                        if (s3 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c125) {
                                            s3 = input.substr(peg$currPos, 6);
                                            peg$currPos += 6;
                                          } else {
                                            s3 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c126); }
                                          }
                                          if (s3 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c125) {
                                              s3 = input.substr(peg$currPos, 6);
                                              peg$currPos += 6;
                                            } else {
                                              s3 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c126); }
                                            }
                                            if (s3 === peg$FAILED) {
                                              if (input.substr(peg$currPos, 2).toLowerCase() === peg$c127) {
                                                s3 = input.substr(peg$currPos, 2);
                                                peg$currPos += 2;
                                              } else {
                                                s3 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c128); }
                                              }
                                              if (s3 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c129) {
                                                  s3 = input.substr(peg$currPos, 3);
                                                  peg$currPos += 3;
                                                } else {
                                                  s3 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c130); }
                                                }
                                                if (s3 === peg$FAILED) {
                                                  if (input.substr(peg$currPos, 3).toLowerCase() === peg$c131) {
                                                    s3 = input.substr(peg$currPos, 3);
                                                    peg$currPos += 3;
                                                  } else {
                                                    s3 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c132); }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c133(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    s0 = [];
    if (peg$c134.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c135); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (peg$c134.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c135); }
      }
    }

    return s0;
  }

  function peg$parseTable() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseIdentifierPart();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseDot();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseVariable();
        if (s3 === peg$FAILED) {
          s3 = peg$parseIdentifierPart();
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseAlias();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c136(s1, s2, s3, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsestar() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 42) {
      s1 = peg$c81;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c82); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c137();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseOpenParen() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 40) {
      s0 = peg$c138;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c139); }
    }

    return s0;
  }

  function peg$parseCloseParen() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 41) {
      s0 = peg$c140;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c141); }
    }

    return s0;
  }

  function peg$parseQuoteMark() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 34) {
      s0 = peg$c142;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c143); }
    }

    return s0;
  }

  function peg$parseComma() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 44) {
      s0 = peg$c144;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c145); }
    }

    return s0;
  }

  function peg$parseSemiColon() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 59) {
      s0 = peg$c146;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c147); }
    }

    return s0;
  }

  function peg$parseApostrophe() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 39) {
      s0 = peg$c148;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c149); }
    }

    return s0;
  }

  function peg$parseDot() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 46) {
      s0 = peg$c150;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c151); }
    }

    return s0;
  }

  function peg$parseIdentifierPart() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c152.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c153); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c152.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c153); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c154(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseReserved() {
    var s0;

    s0 = peg$parseBinaryOperator();
    if (s0 === peg$FAILED) {
      s0 = peg$parseOperator();
      if (s0 === peg$FAILED) {
        s0 = peg$parseFunction();
        if (s0 === peg$FAILED) {
          s0 = peg$parseParts();
        }
      }
    }

    return s0;
  }

  function peg$parseParts() {
    var s0;

    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c6) {
      s0 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c7); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c9) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c10); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c12) {
          s0 = input.substr(peg$currPos, 8);
          peg$currPos += 8;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c13); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c16) {
            s0 = input.substr(peg$currPos, 6);
            peg$currPos += 6;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c17); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 5).toLowerCase() === peg$c22) {
              s0 = input.substr(peg$currPos, 5);
              peg$currPos += 5;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c23); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c32) {
                s0 = input.substr(peg$currPos, 9);
                peg$currPos += 9;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c33); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 6).toLowerCase() === peg$c1) {
                  s0 = input.substr(peg$currPos, 6);
                  peg$currPos += 6;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c2); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2).toLowerCase() === peg$c89) {
                    s0 = input.substr(peg$currPos, 2);
                    peg$currPos += 2;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c90); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c19) {
                      s0 = input.substr(peg$currPos, 8);
                      peg$currPos += 8;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c20); }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }


    var functions = ["COUNT",
    "SUM","MIN", "MAX","AVG","APPROX_COUNT_DISTINCT",
    "APPROX_COUNT_DISTINCT_DS_HLL", "APPROX_COUNT_DISTINCT_DS_THETA",
    "APPROX_QUANTILE", "APPROX_QUANTILE_DS", "APPROX_QUANTILE_FIXED_BUCKETS",
    "BLOOM_FILTER", "ABS", "CEIL", "EXP", "FLOOR", "LN", "LOG10", "POWER", "SQRT",
    "TRUNCATE", "TRUNC", "ROUND", "MOD", "SIN", "COS", "TAN", "COT", "ASIN", "ACOS",
    "ATAN", "ATAN2", "DEGREES", "RADIANS", "CONCAT", "TEXTCAT", "STRING_FORMAT",
    "LENGTH", "CHAR_LENGTH", "CHARARACTER_LENGTH", "STRLEN", "LOOKUP", "LOWER",
    "PARSE_LONG", "POSITION", "REGEXP_EXTRACT", "REPLACE", "STRPOS", "SUBSTRING",
    "RIGHT", "LEFT", "SUBSTR", "TRIM", "BTRIM", "LTRIM", "RTRIM", "UPPER", "REVERSE",
    "REPEAT", "LPAD", "RPAD", "CURRENT_TIMESTAMP", "CURRENT_DATE", "DATE_TRUNC",
    "TIME_FLOOR", "TIME_SHIFT", "TIME_EXTRACT", "TIME_PARSE", "TIME_FORMAT",
    "MILLIS_TO_TIMESTAMP", "TIMESTAMP_TO_MILIS", "EXTRACT", "FLOOR", "CEIL", "TIMESTAMPADD",
    "timestamp_expr", "CAST", "NULLIF", "COALESCE", "BLOOM_FILTER_TEST"];


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};
